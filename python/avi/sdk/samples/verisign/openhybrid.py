"""
Created on May 31, 2016

@author: grastogi@avinetworks.com
This provides example of taking DOS_ATTACK event generated by Avi 
Controller and posting it to verisign.
Steps to integrate with the DOS_ATTACK event

1. Create Alert on event DOS_ATTACK
2. Add following control script
#!/usr/bin/python
import sys
from avi.sdk.samples.autoscale.verisign.openhybrid import dos_attack_alert_action

versign_settings = {
    'url': 'http://verisigninc.com',
    'source_id': 'avi controller or cust id'
    }
dos_attack_alert_action(versign_settings, *sys.argv)

"""
import json
import logging
from requests import Session
from avi.sdk.avi_api import ApiSession
import os
import sys

log = logging.getLogger(__name__)

class OpenHybrid(object):
    """
    Utility function to interface between the openhybrid API and 
    Avi DDoS information.
    """
    def __init__(self, versign_settings):
        self.versign_settings = versign_settings
        vurl = versign_settings.get('url', 'http://verisigninc.com/')
        self.api_endpoint = Session()

    def getOpenHybridData(self, ts, obj_id, obj_name, dos_event,
                          vs_info):
        """
        converts the Avi Alert information into the open hybrid data
        @param ts: timestamp of the dos attack
        @param obj_id: uuid of the object eg. VS
        @param obj_name: name of the object
        @param dos_event: dos event details
        @param vs_info: virtualservice inventory information
        """
        data = {'source_id': self.versign_settings.get(
                    'source_id', 'avi_controller'),
                'incident_id': '%s(%s):%s' % (obj_name, obj_id, ts),
                'alert_type': dos_event['type'],
                'start_time': str(ts),
                'destination': obj_name,
                'misc_info': dos_event,
                'source_ips': ','.join(dos_event['src_ips']),
                'destination': vs_info['config']['address'],
                'destination_port': vs_info['config']['services'][0]['port'],
                'destination_protocol': vs_info['app_profile_type'].split(
                    'APPLICATION_PROFILE_TYPE_')[1]
                }
        return data

    def signalDosAttack(self, ts, obj_id, obj_name, dos_event, vs_info):
        """
        @param ts: timestamp of the dos attack
        @param obj_id: uuid of the object eg. VS
        @param obj_name: name of the object
        @param dos_event: dos event details
        @param vs_info: virtualservice inventory information
        """
        data = self.getOpenHybridData(ts, obj_id, obj_name, dos_event, vs_info)
        log.debug('data %s', json.dumps(data, indent=2))
        # TODO(verisign): need api details
        #resp = self.api_endpoint.post(url, data=data)
        #log.debug('resp %s: json %s', resp.status, resp.json())


def dos_attack_alert_action(verisign_settings, *args):
    """
    @param verisign_settings: dictionary of the settings used for communicating
        to verisign
    @param args: control script arguments
    """
    alert_info = json.loads(args[1])
    ohs = OpenHybrid(verisign_settings)
    token = os.environ.get('API_TOKEN')
    controller_ip = os.environ.get('CONTROLLER_IP')
    username = os.environ.get('USER')
    tenant = os.environ.get('TENANT')
    password = os.environ.get('PASSWORD')
    with ApiSession(
        controller_ip, username, password=password,
        token=token, tenant=tenant) as avi_api:
        for event_info in alert_info.get('events', []):
            obj_id = event_info.get('obj_uuid', '')
            vs_info = avi_api.get('virtualservice-inventory/%s' % obj_id).json()
            obj_name = event_info.get('obj_name', '')
            dos_event = event_info['event_details']['dos_attack_event_details']
            ts = event_info.get('report_timestamp')
            ohs.signalDosAttack(ts, obj_id, obj_name, dos_event, vs_info)

if __name__ == '__main__':
    ch = logging.StreamHandler(sys.stdout)
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.addHandler(ch)

    avi_env = {
        'PASSWORD': 'avi123',
        'USER': 'admin',
        'CONTROLLER_IP': '10.10.25.42',
        'TENANT': 'admin'
        }
    os.environ.update(avi_env)
    vsettings = {'url': 'http://www.bing.com/',
                  'source_id': 'avi controller'}

    dos_event = {'src_ips': ['10.42.42.1', '10.42.42.2'],
                 'type': 'SYN_FLOOD'}
    dos_event = {
        'report_timestamp': 10000000,
        'event_id': 'DOS_ATTACK',
        'obj_uuid': 'virtualservice-7f4e5833-b921-49fd-a603-d635d699768d',
        'obj_name': 'vs1',
        'event_details': {
            'dos_attack_event_details': dos_event
            }
        }
    alert_info = {
        'events': [dos_event]
        }
    alert_data = json.dumps(alert_info)
    dos_attack_alert_action(vsettings, 'dos_attack_file_name', alert_data)


